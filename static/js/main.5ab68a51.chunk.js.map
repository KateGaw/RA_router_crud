{"version":3,"sources":["components/pages/ErrorPage.js","components/pages/HomePage.js","components/pages/NewPostPage.js","components/pages/PostPage.js","App.js","serviceWorker.js","index.js"],"names":["ErrorPage","className","title","to","HomePage","useState","isLoading","setIsLoading","posts","setPosts","useEffect","axios","get","then","response","data","reverse","map","item","key","id","moment","created","format","content","NewPostPage","props","postContent","setPostContent","history","useHistory","location","pathname","idPath","state","handleClose","push","onSubmit","event","match","path","output","JSON","stringify","setId","shortid","generate","fetch","method","body","savePost","editPost","preventDefault","value","onChange","target","aria-label","onClick","PostPage","post","setPost","params","delete","App","component","exact","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ab68a51.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst ErrorPage = () => {\n  return (\n    <div className=\"err_page\">\n      <h1>Страница не найдена</h1>\n      <Link title=\"На главную\" to=\"/\">\n        На главную\n      </Link>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nconst HomePage = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    axios.get(\"http://localhost:7777/posts\").then((response) => {\n      setPosts(response.data.reverse());\n      setIsLoading(false);\n    });\n  }, []);\n\n  return (\n    <>\n      <Link className=\"button\" to=\"posts/new\">\n        Создать пост\n      </Link>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <div className=\"posts_list\">\n          {posts !== [] ? (\n            posts.map((item) => (\n              <div className=\"post\" key={item.id}>\n                <Link key={item.id} to={`/posts/${item.id}`}>\n                  <time className=\"post_date\">\n                    {moment(item.created).format(\"DD.MM.YYYY - HH:mm\")}\n                  </time>\n                  <p className=\"post_text\">{item.content}</p>\n                </Link>\n              </div>\n            ))\n          ) : (\n            <p>No posts...</p>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default HomePage;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\n\nconst NewPostPage = (props) => {\n  const [postContent, setPostContent] = useState(\"\");\n  const history = useHistory();\n\n  useEffect(() => {\n    if (props.location.pathname === \"/posts/edit\") {\n      const idPath = props.location.state.id;\n      axios.get(`http://localhost:7777/posts/${idPath}`).then((response) => {\n        setPostContent(response.data.content);\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const handleClose = () => {\n    history.push(\"/\");\n  };\n\n  const handleChange = (event) => {\n    setPostContent(event.target.value);\n  };\n\n  const savePost = () => {\n    const output = JSON.stringify({\n      id: 0,\n      setId: shortid.generate(),\n      content: postContent,\n    });\n\n    fetch(\"http://localhost:7777/posts\", {\n      method: \"POST\",\n      body: output,\n    }).then(() => {\n      setPostContent(\"\");\n      handleClose();\n    });\n  };\n\n  const editPost = () => {\n    const output = JSON.stringify({\n      id: props.location.state.id,\n      content: postContent,\n    });\n\n    fetch(\"http://localhost:7777/posts\", {\n      method: \"POST\",\n      body: output,\n    }).then(() => {\n      setPostContent(\"\");\n      handleClose();\n    });\n  };\n\n  const handleSubmit = (event) => {\n    if (postContent !== \"\") {\n      if (props.match.path === \"/posts/new\") {\n        savePost();\n      } else if (props.match.path === \"/posts/edit\") {\n        editPost();\n      }\n    }\n\n    event.preventDefault();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"new_post\">\n      <textarea\n        value={postContent}\n        onChange={handleChange}\n        className=\"textarea\"\n      />\n      <div className=\"newpost_actions\">\n        <button className=\"button save_button\">Save</button>\n        <button\n          className=\"button close_button\"\n          aria-label=\"Закрыть\"\n          onClick={handleClose}\n        >\n          X\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewPostPage;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nconst PostPage = (props) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [post, setPost] = useState([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    setIsLoading(true);\n    axios\n      .get(\"http://localhost:7777/posts/\" + props.match.params.id)\n      .then((response) => {\n        setPost(response.data);\n        setIsLoading(false);\n      });\n    // eslint-disable-next-line\n  }, []);\n\n  const handleDelete = () => {\n    setIsLoading(true);\n    axios\n      .delete(\"http://localhost:7777/posts/\" + props.match.params.id)\n      .then(() => {\n        setIsLoading(false);\n        history.push(\"/\");\n      });\n  };\n\n  const handleChange = () => {\n    history.push({\n      pathname: \"/posts/edit\",\n      state: { id: props.match.params.id },\n    });\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <p> Loading... </p>\n      ) : (\n        <div className=\"post_page\">\n          <div className=\"posts\">\n            <time className=\"post_date\">\n              {moment(post.created).format(\"DD.MM.YYYY - HH.mm\")}\n            </time>\n            <p className=\"post_text\"> {post.content} </p>\n          </div>\n          <div className=\"post_actions\">\n            <button onClick={handleChange} className=\"button change_button\">\n              Change\n            </button>\n            <button onClick={handleDelete} className=\"button delete_button\">\n              Delete\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default PostPage;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport ErrorPage from \"./components/pages/ErrorPage\";\nimport HomePage from \"./components/pages/HomePage\";\nimport NewPostPage from \"./components/pages/NewPostPage\";\nimport PostPage from \"./components/pages/PostPage\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"background-element\"> </div>{\" \"}\n      <div className=\"highlight-window\">\n        <div className=\"highlight-overlay\"> </div>{\" \"}\n      </div>{\" \"}\n      <div className=\"window\">\n        <Router>\n          <Switch>\n            <Route component={NewPostPage} exact path=\"/posts/new\" />\n            <Route component={NewPostPage} exact path=\"/posts/edit\" />\n            <Route component={PostPage} exact path=\"/posts/:id\" />\n            <Route component={HomePage} exact path=\"/\" />\n            <Route component={ErrorPage} path=\"*\" />\n          </Switch>\n        </Router>\n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}